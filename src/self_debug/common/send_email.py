"""Send email."""

import logging
import os
import sys
from typing import Any, Dict, Sequence, Tuple, Union

import boto3
from botocore.exceptions import ClientError

from self_debug.common import utils


AWS_REGION = "us-east-1"
CHARSET = "UTF-8"  # The character encoding for the email

# Emails.
SENDER = "sliuxl+bot@amazon.com"


def email(
    msg: str,
    recipients: Union[Sequence[str], str],
    subject: str = "",
    region: str = None,
    dry_run: bool = False,
    prefix: str = "<p>",
    suffix: str = "</p>",
) -> Tuple[str, Tuple[str], Dict[str, Any], str, bool]:
    """Send email with (subject, msg, recipients) information.

    `msg`: Will be a paragraph in the email.
    """
    if not region:
        region = AWS_REGION

    subject = f"[{region}] BOT Email: {subject}"

    filename = os.path.abspath(sys.argv[0])
    body_html = f"""
    <html>
    <head></head>
    <body>
        {prefix}{msg}{suffix}
        <!--<h1>Amazon Test Email (SDK for Python)</h1>-->
        <p style="color:grey">Generated by
          <a href="https://aws.amazon.com/ses/">Amazon SES</a> with the
          <a href="https://aws.amazon.com/sdk-for-python/">AWS SDK for Python (Boto)</a>: {filename}.
        </p>
    </body>
    </html>
    """

    # Try to send the email.
    message = {
        "Body": {
            "Html": {
                "Charset": CHARSET,
                "Data": body_html,
            },
        },
        "Subject": {
            "Charset": CHARSET,
            "Data": subject,
        },
    }

    if recipients is None:
        recipients = ()
    elif isinstance(recipients, str):
        if recipients.strip():
            recipients = recipients.strip().replace(" ", "").split(",")
        else:
            recipients = ()
    recipients = (r.strip() for r in recipients)
    recipients = tuple(r if "@" in r else f"{r}@amazon.com" for r in recipients if r)
    dry_run = dry_run or not recipients

    logging.debug("Will send msg: ```%s```.", message)
    sent = False
    if dry_run:
        logging.info("Skip sending email as dry_run = `%s`.", dry_run)
    else:
        try:
            client = boto3.client("ses", region_name=region)
            response = client.send_email(
                Destination={
                    "ToAddresses": list(recipients),
                },
                Message=message,
                Source=SENDER,
            )

            logging.info("Email sent! Message ID: ```%s```.", response["MessageId"])
            sent = True
        # Display an error if something goes wrong.
        except ClientError as error:
            logging.exception(
                "Failed to send email: <<<%s>>>.", error.response["Error"]["Message"]
            )

    return (SENDER, recipients, message, region, sent)


def main(argv):
    """Main."""
    msg = argv[0] if argv else "Hello world."
    region = argv[1] if len(argv) >= 2 else AWS_REGION
    dry_run = bool(int(argv[2])) if len(argv) >= 3 else False

    email(msg, SENDER, region=region, dry_run=dry_run)


if __name__ == "__main__":
    logging.basicConfig(level=logging.INFO, format=utils.LOGGING_FORMAT)
    main(sys.argv[1:])
