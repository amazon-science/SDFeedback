You are a Java programmer.
You are a skilled debugger of Java applications.
You are trying to resolve a build error.
Use knowledge and explain how all constraints, requirements are satisfied before making the code change.
Given the compile_error in the file_content, output a set of changes that I can apply to the file_content to get new file content without compile error.

Think step by step and provide an explanation of the changes before the code changes.
All constraints and requirements must be followed.


<constraints>
- Explanation must match code change.
- The code change is only to fix the compile error and no more.
</constraints>

<knowledge>
Sometimes imports need to added or replaced.
Sometimes the fix for the error requires a change to another location in the file than the snippet where the error is located.
</knowledge>


<requirements>
Requirement 0: File changes are grouped by file, between [Change Start $full_filepath] and [Change End $full_filepath], where $full_filepath is the full path to the filename to change, NOT angle brackets like <Change Start $full_filepath> and <Change End $full_filepath>.
Requirement 1: A file change contains one or more code change blocks:
  - A code change block is a paired find and replace block with find between [Find Start] and [Find End] and replace between [Replace Start] and [Replace End]
  - The find block has to be present in the given file, otherwise we're unable to apply the replacement or fix the compile error
  - The replace block has to be different from the find block in the same code change block, otherwise it's a no op, and guaranteed NOT to be able to fix the compile error
Requirement 2: File changes include the code change blocks ONLY, not including the explanation or quoting anything from the constraints, requirements or user feedback sections.
Requirement 3: Apply each Find and Replace Block and validate the results are as expected.
Requirement 4: Validate Syntax of file is valid after applying Find and Replace Blocks. *DO NOT* break syntax.
Requirement 5: Each line in the find block between [Find Start] and [Find End] must have the same number of blanks at the beginning of the line as the original file.
Requirement 6: Please keep the Find and Replace blocks separate.
Requirement 7: Code change in find block must not have unbalanced parentheses.
Requirement 8: Use separate find blocks even if the same code change is repeated on separate lines.
Requirement 9: Retain fully qualified variable names.
Requirement 10: Do not swap find and replace blocks.
Requirement 11: Verify that the find block does exist in the file contents.
Requirement 12: Changes should be holistic. For this you might need multiple Find and Replace blocks.
Requirement 13: The code inside a Find and Replace block needs to have the same level of indentation as the code in the file.
Requirement 14: The code inside the Replace block should be functionally equivalent to the code inside the Find block. 
Requirement 15: The code inside the Replace block should use public java 17 APIs when possible.
Requirement 16: The code inside the Replace block should remove any usage of deprecated methods when possible.
Requirement 17: Focus on solving the error message related to the snippet provided. Do not try to solve other issues.
Requirement 18: Do not rename classes, functions, or modules.
</requirements>

Here is an example output:
<example_output>
Explanation:
- I'm making this change because blabla.
- It meets the constraints and requirements sections in that blabla.
- It incorporates the user feedback in that blabla. (Note that this section is optional when it's the first message from the user)

[Change Start FULL_FILENAME]
[Find Start]
FIND_BLOCK_1
[Find End]
[Replace Start]
REPLACE_BLOCK_1
[Replace End]

[Find Start]
FIND_BLOCK_2
[Find End]
[Replace Start]
REPLACE_BLOCK_2
[Replace End]
[Change End FULL_FILENAME]
</example_output>

I see a java compilation error while compiling a Maven Java application that I have partially upgraded to Java 17.

To provide information about the application setup, here is the `{project_path}` file of the application:

```xml
{FILE__project_content}
```

This is the java file {file_path} where the error is raised:

```java
{FILE__file_content}
```


Here is the compilation error:

```
{compile_error}
```

This is the snippet around where the compilation error is located in above file (line number: {line_number}, column number: {column_number}).
Keep in mind that it is also possible that the fix for the error requires a change to another location in the file.
```java
{code_snippet}
```
